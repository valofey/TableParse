Данный проект создан в качестве решения тестового задания хакатона "Игры разумов" командой "Зачем".

- СОДЕРЖАНИЕ:

1) Структура репозитория
2) Описание использованных технологий
3) Реализованный функционал
4) Взаимодействие с API
5) Схема архитектуры системы

1) СТРУКТУРА РЕПОЗИТОРИЯ

Репозиторий содержит:

1.1) Исходный код приложения (папка: TableParse)
1.2) Видеоролик, подтверждающий работоспособность приложения (файл: demo.mp4)
1.3) Дипломы, подтверждающие успешное прохождение теста на двадцатый чин всеми членами команды (папка: Certificates)
1.4) Файл, который вы сейчас читаете (файл: README_RUS.txt)
1.5) Тот же файл на английском языке (файл: README_ENG.txt)

2) ОПИСАНИЕ ИСПОЛЬЗОВАННЫХ ТЕХНОЛОГИЙ (И БИБЛИОТЕК)

* Приложение было написано на платформе Windows Forms .NET Core 3.1 (C#).
* Все функции приложения были реализованы через стандартную библиотеку System.
* Для корректной работы с JSON использованна сторонняя библиотека Newtonsoft.Json.

3) РЕАЛИЗОВАННЫЙ ФУНКЦИОНАЛ

Приложение имеет две рабочих области в отдельных окнах:

3.1) Рабочая область "Лидерборд"

* Подгружает ТОП100 игроков с сайта gokgs.com (позиция, имя, рейтинг)
* Использует API для получения данных о результатах двух последних игр каждого игрока
* Собирает подгруженные данные в одну таблицу для удобной работы с ними
* Позволяет открыть предпросмотр любой из двух игр в рабочей области "Игра" по нажатию на соответствующий результат
* (Дополнительный функционал) позволяет отсортировать данные по каждому столбцу

3.2) Рабочая область "Игра"

* Использует API для получения информации об игре и каждом ходе внутри неё (цвет, позиции, счет, размер сетки, оставшееся время)
* Отображает эту информацию графически на доске
* Отображает побочную информацию о каждом ходе в текстовом поле внизу экрана
* Позволяет переключаться между ходами по нажатию на стрелки слева и справа
* (Дополнительный функционал) корректно отображает информацию при выходе за границы отведенного времени любым из игроков

4) ВЗАИМОДЕЙСТВИЕ С API

Сценарий взаимодействия с API:

4.1) Отправка POST запроса LOGIN по установленной форме
4.2) GET запрос
4.3) Для каждого игрока из топ 100 отправка POST запроса JOIN_ARCHIVE_REQUEST с параметром name - именем игрока
4.4) GET запрос
4.5) Отправка POST запроса LOGOUT по установленной форме
4.6) GET запрос

* Запросы оформляются и обрабатываются с помощью JsonConvert от Newtonsoft
* Запросы на сервер отправляются последовательно
* Запрос типа UNJOIN_REQUEST не используется, т.к. неоправданно понижает быстродействие

5) АРХИТЕКТУРА СИСТЕМЫ

Исходный код приложения содержит следующие сущности:

5.1) Form1.cs - Графический интерфейс рабочей области "Лидерборд"
5.2) Form2.cs - Графический интерфейс рабочей области "Игра"
5.3) Program.cs - Точка входа программы
5.4) Player.cs - Класс для описания игрока из ТОП100
5.5) Stone.cs - Класс для описания одного отдельного хода игры
5.6) API.cs - Класс для реализации корректной  работы с API
5.7) JsonFormsUpstream - Класс для отправки запросов на сервер
5.8) JsonFormsDownstream - Класс для получения ответов с сервера